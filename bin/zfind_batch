#!/usr/bin/env python
from os import environ
from os.path import join, basename
from glob import iglob

from pbs import queue

q = queue()
q.verbose = True
nodes = 12
walltime = '36:00:00'
ncycles = 250

try: uufscell = environ['UUFSCELL']
except: uufscell = None
if 'kingspeak' in uufscell:
    alloc = 'sdss-kp'
    ppn=16
elif 'ember' in uufscell:
    alloc = 'bolton-em'
    ppn=12
else:
    alloc = None
    ppn=None

try: topdir = environ['BOSS_SPECTRO_REDUX']
except: topdir = None
try: run2d = environ['RUN2D']
except: run2d = None
platedir = join(topdir,run2d,'*','spPlate-*.fits') if topdir and run2d else None

plates=[]
mjds=[]
if platedir:
    for path in iglob(platedir):
        spfile = basename(path)
        try:
            plate = int(spfile[8:12])
            mjd = int(spfile[13:18])
        except:
            plate = None
            mjd = None
        if plate and mjd:
            plates.append(plate)
            mjds.append(mjd)
            print(plate)

cjob = 0
q.create(label='zfind_%r' % cjob,alloc=alloc,nodes=nodes,ppn=ppn,
         walltime=walltime)
blocksize = nodes*ppn*ncycles
for i,plate in enumerate(plates):
    for fiberid in range(1000):
        q.append("zfind -p %i -m %i -f %i" % (plate,mjds[i],fiberid))
        if q.task_number >= blocksize:
            cjob += 1
            q.commit(hard=True, submit=True)
            q = queue()
            q.verbose = True
            q.create(label='zfind_%r' % cjob,alloc=alloc,nodes=nodes,ppn=ppn,
                     walltime=walltime)
if not q.client.committed:
    q.commit(hard=True, submit=True)








