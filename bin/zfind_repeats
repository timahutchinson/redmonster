#!/usr/bin/env python

# this determines if you run first or second observation of each object
set = 2

# Run redmonster on all sequels LRG targets observed more than once
from os import environ
from os.path import join, basename
from glob import iglob
import re
import sys

from pbs import queue
from astropy.io import fits
import numpy as n

q = queue()
q.verbose = True
nodes = 12
walltime = '36:00:00'
ncycles = 250

try: uufscell = environ['UUFSCELL']
except: uufscell = None
if 'kingspeak' in uufscell:
    alloc = 'sdss-kp'
    ppn=16
elif 'ember' in uufscell:
    alloc = 'bolton-em'
    ppn=12
else:
    alloc = None
    ppn=None

try: topdir = environ['BOSS_SPECTRO_REDUX']
except: topdir = None
try: run2d = environ['RUN2D']
except: run2d = None
spallpath = join(topdir, run2d, 'spAll-%s.fits' % run2d)

data_range = [4000,9000]

directory = '/uufs/astro.utah.edu/common/home/u0814744/compute/scratch/repeatability'
hdu = fits.open('/uufs/chpc.utah.edu/common/home/sdss00/ebosswork/eboss/spectro/redux/test/bautista/test_dr14/spAll-test_dr14.fits')

print('Selecting LRGs')
a = hdu[1].data
w = n.where( a.EBOSS_TARGET1 & 2 > 0)[0]
a = a[w]

wr = list()

for i in range(len(a)):
    sys.stderr.write('\r '+str(i)+' '+str(len(a)))
    t = a.THING_ID[i]
    w = n.where( a.THING_ID == t )[0]
    if len(w) > 1:
        wr.extend(w)
print(len(wr))

wr = n.unique(n.array(wr))
newa = a[wr]
print(len(n.unique( newa.THING_ID )), 'repeats')
newhdu = fits.BinTableHDU(data=newa)
newhdu.writeto(directory+'/spAll-v5_10_0-repeats_lrg.fits', clobber=True)


hdu = fits.open(directory+'/spAll-v5_10_0-repeats_lrg.fits')

thing_ids = []
object_ids1 = []
object_ids2 = []
object_ids = {}

for thing_id in hdu[1].data.THING_ID:
    if thing_id not in thing_ids:
        thing_ids.append(thing_id)
        w1 = n.where(hdu[1].data.THING_ID == thing_id)[0][0]
        w2 = n.where(hdu[1].data.THING_ID == thing_id)[0][1]
        object_id1 = (hdu[1].data.PLATE[w1], hdu[1].data.MJD[w1], hdu[1].data.FIBERID[w1]-1)
        object_ids1.append(object_id1)
        object_id2 = (hdu[1].data.PLATE[w2], hdu[1].data.MJD[w2], hdu[1].data.FIBERID[w2]-1)
        object_ids2.append(object_id2)
        object_ids[(hdu[1].data.PLATE[w1], hdu[1].data.MJD[w1], hdu[1].data.FIBERID[w1]-1)] = (hdu[1].data.PLATE[w2], hdu[1].data.MJD[w2], hdu[1].data.FIBERID[w2]-1)

plates = []
mjds = []
fibers = []

if set == 1:
    for object_id in list(object_ids.keys()):
        plates.append(object_id[0])
        mjds.append(object_id[1])
        fibers.append(object_id[2])
elif set == 2:
    for object_id in list(object_ids.values()):
        plates.append(object_id[0])
        mjds.append(object_id[1])
        fibers.append(object_id[2])

cjob = 0
q.create(label='zfind_repeats_%r' % cjob,alloc=alloc,nodes=nodes,ppn=ppn, walltime=walltime)
blocksize = nodes*ppn*ncycles
for i,plate in enumerate(plates):
    q.append("zfind -p %i -m %i -f %i" % (plate,mjds[i],fibers[i]))
    if q.task_number >= blocksize:
        cjob += 1
        q.commit(hard=True, submit=True)
        q = queue()
        q.verbose = True
        q.create(label='zfind_%r' % cjob,alloc=alloc,nodes=nodes,ppn=ppn,walltime=walltime)
if not q.client.committed:
    q.commit(hard=True, submit=True)

















